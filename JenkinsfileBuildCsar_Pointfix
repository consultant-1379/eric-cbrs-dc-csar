#!/usr/bin/env groovy

/* IMPORTANT:
 *
 *
 * In order to make this pipeline work, the following configuration on Jenkins is required:
 * - slave with a specific label (see pipeline.agent.label below)
 * - credentials plugin should be installed and have the secrets with the following names:
 *   + cbrsciadm credentials (token to access Artifactory)
 */

def defaultBobImage = 'armdocker.rnd.ericsson.se/proj-adp-cicd-drop/bob.2.0:latest'
def bob = new BobCommand()
        .bobImage(defaultBobImage)
		.envVars([
        HOME:'${HOME}',
		CSAR_PACKAGE_NAME:'${CSAR_PACKAGE_NAME}',
		PWD:'${PWD}',
		HELM_REPO_TOKEN:'${HELM_REPO_TOKEN}',
		GERRIT_USERNAME:'${GERRIT_USERNAME}',
        GERRIT_PASSWORD:'${GERRIT_PASSWORD}',
		BRANCH:'${BRANCH}',
        PRODUCTION_DATE:'${PRODUCTION_DATE}'
    ])
        .needDockerSocket(true)
        .toString()

pipeline {
    agent {
            node
            {
            label "GE7_Docker"
            }
        }
	environment{
        CSAR_PACKAGE_NAME = "eric-cbrs-dc-package"
    }
    stages {
       stage ('Clean workspace') {
            steps {
                script {
                          sh "docker system prune -fa"
                }
            }
	    }
		stage('Get Integration Chart'){
            steps{
                script {
		            sh "${bob} get-charts"
	                archiveArtifacts allowEmptyArchive: true, artifacts: 'ruleset2.0.yaml, JenkinsfileBuildCsar'
		        }
		    }
        }
		stage('Inject Credential Files') {
            steps {
                withCredentials([file(credentialsId: 'cbrsciadm_docker_config', variable: 'dockerConfig')]) {
				sh "cp ${dockerConfig} ${HOME}/.docker/config.json"
                }
            }
        }
		stage('Extract CRDs'){
            steps{
                script {
		            sh "${bob} extract-crd"
		        }
		    }
        }
		stage('generate-new-version') {
            steps {
                sh "${bob} generate-new-version"
            }
        }
        stage('add-version-info-to-integration-values'){
            steps {
                script {
                    env.PRODUCTION_DATE = sh(script: 'date +%FT%TZ --utc', returnStdout: true).trim()
                    sh "${bob} add-version-info-to-integration-values"
                }
            }
        }
        stage('Copy integration-values'){
            steps {
                sh 'cp integration-values/eric-cbrs-integration-values.yaml scripts/eric-cbrs-integration-values.yaml'
            }
        }
        stage('Extract Files'){
            steps {
                sh "${bob} extract-files"
            }
        }
		stage('build CSAR'){
		    steps {
		        sh "${bob} build-csar"
			}
		 }
	    stage('upload-pointfix-release-csar') {
		    steps {
		        script {
			        withCredentials([string(credentialsId: 'CBRSCIADM', variable: 'HELM_REPO_TOKEN')]){
			        sh "${bob} upload-pointfix-release-csar"
			        }
			    }
	        }
		}
		stage('Create CSAR Git Tag') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'Gerrit HTTP',usernameVariable: 'GERRIT_USERNAME',passwordVariable: 'GERRIT_PASSWORD')])
                {
                    sh "${bob} create-csar-git-tag"
                }
            }
        }
		stage('increment-pointfix-version-prefix') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'Gerrit HTTP',usernameVariable: 'GERRIT_USERNAME',passwordVariable: 'GERRIT_PASSWORD')])
                {
                    sh "${bob} increment-pointfix-version-prefix"
					archiveArtifacts 'artifact.properties'
                }
            }
        }
    }	
    post {
		always{
		    sh "df -h /local/docker/ /local/docker/"
			deleteDir()
			}
		}
    }

// More about @Builder: http://mrhaki.blogspot.com/2014/05/groovy-goodness-use-builder-ast.html
import groovy.transform.builder.Builder
import groovy.transform.builder.SimpleStrategy

@Builder(builderStrategy = SimpleStrategy, prefix = '')
class BobCommand {

    def bobImage = 'bob.2.0:latest'
    def envVars = [:]

    def needDockerSocket = false

    String toString() {
        def env = envVars
                .collect({ entry -> "-e ${entry.key}=\"${entry.value}\"" })
                .join(' ')

        def cmd = """\
            |docker run
            |--init
            |--rm
            |--workdir \${PWD}
            |--user \$(id -u):\$(id -g)
            |-v \${PWD}:\${PWD}
            |-v /etc/group:/etc/group:ro
            |-v /etc/passwd:/etc/passwd:ro
            |-v \${HOME}:\${HOME}
            |${needDockerSocket ? '-v /var/run/docker.sock:/var/run/docker.sock' : ''}
            |${env}
            |\$(for group in \$(id -G); do printf ' --group-add %s' "\$group"; done)
            |--group-add \$(stat -c '%g' /var/run/docker.sock)
            |${bobImage}
            |"""
        return cmd
                .stripMargin()           // remove indentation
                .replace('\n', ' ')      // join lines
                .replaceAll(/[ ]+/, ' ') // replace multiple spaces by one
    }
}
